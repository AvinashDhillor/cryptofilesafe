{"version":3,"sources":["components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["algorithm","inputEncoding","outputEncoding","Main","state","secretKey","inputText","resultText","fileName","validateSecretString","secretString","length","Buffer","from","handleSecretKey","e","setState","target","value","handleInputText","handleFileName","encrypt","key","iv","crypto","randomBytes","cipher","createCipheriv","ciphered","update","final","ciphertext","toString","decrypt","components","split","iv_from_ciphertext","shift","decipher","createDecipheriv","deciphered","join","error","generateTextFile","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","class","className","for","id","placeholder","onChange","this","style","wordBreak","role","aria-label","onClick","autocomplete","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c08d5299.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport crypto from \"crypto\";\r\n\r\nconst algorithm = \"aes256\";\r\nconst inputEncoding = \"utf8\";\r\nconst outputEncoding = \"hex\";\r\nconst ivlength = 16;\r\n\r\nexport default class Main extends Component {\r\n  state = {\r\n    secretKey: \"\",\r\n    inputText: \"\",\r\n    resultText: \"\",\r\n    fileName: null,\r\n  };\r\n\r\n  validateSecretString = (secretString) => {\r\n    while (secretString.length !== 32) secretString += \" \";\r\n    let key = Buffer.from(secretString, \"utf-8\");\r\n    return key;\r\n  };\r\n\r\n  handleSecretKey = (e) => {\r\n    this.setState(() => ({\r\n      secretKey: e.target.value,\r\n    }));\r\n  };\r\n\r\n  handleInputText = (e) => {\r\n    this.setState(() => ({\r\n      inputText: e.target.value,\r\n    }));\r\n  };\r\n\r\n  handleFileName = (e) => {\r\n    this.setState(() => ({\r\n      fileName: e.target.value,\r\n    }));\r\n  };\r\n\r\n  encrypt = () => {\r\n    let key = this.validateSecretString(this.state.secretKey);\r\n    var iv = crypto.randomBytes(ivlength);\r\n    let cipher = crypto.createCipheriv(algorithm, key, iv);\r\n    let ciphered = cipher.update(\r\n      this.state.inputText,\r\n      inputEncoding,\r\n      outputEncoding\r\n    );\r\n    ciphered += cipher.final(outputEncoding);\r\n    let ciphertext = iv.toString(outputEncoding) + \":\" + ciphered;\r\n    this.setState(() => ({\r\n      resultText: ciphertext,\r\n    }));\r\n  };\r\n\r\n  decrypt = () => {\r\n    try {\r\n      let key = this.validateSecretString(this.state.secretKey);\r\n      let components = this.state.inputText.split(\":\");\r\n      let iv_from_ciphertext = Buffer.from(components.shift(), outputEncoding);\r\n      let decipher = crypto.createDecipheriv(\r\n        algorithm,\r\n        key,\r\n        iv_from_ciphertext\r\n      );\r\n      let deciphered = decipher.update(\r\n        components.join(\":\"),\r\n        outputEncoding,\r\n        inputEncoding\r\n      );\r\n      deciphered += decipher.final(inputEncoding);\r\n      this.setState(() => ({\r\n        resultText: deciphered,\r\n      }));\r\n    } catch (error) {\r\n      this.setState(() => ({\r\n        resultText: \"Sorry, either cipher text or key is invalid!\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  generateTextFile = () => {\r\n    if (this.state.fileName === null || this.state.fileName.length === 0)\r\n      return;\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([this.state.resultText], {\r\n      type: \"text/plain\",\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = `${this.state.fileName}.txt`;\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav class=\"navbar navbar-light bg-light\">\r\n          <div class=\"container-fluid\">\r\n            <a class=\"navbar-brand\" href=\"/\">\r\n              <i className=\"fab fa-contao m-2\"></i>\r\n              Crypto File Safe\r\n            </a>\r\n          </div>\r\n        </nav>\r\n        <div className=\"d-flex justify-content-center container my-3\">\r\n          <div class=\"col-sm-7 mt-5 d-flex justify-content-center flex-column\">\r\n            <label for=\"secretkey\" class=\"form-label\">\r\n              Enter secret key (Keep it secret and don't forget){\" \"}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              id=\"secretkey\"\r\n              placeholder=\"< 32 length\"\r\n              onChange={this.handleSecretKey}\r\n            />\r\n            <div class=\"form-text my-2 p-2\" style={{ wordBreak: \"break-all\" }}>\r\n              {this.state.secretKey}\r\n            </div>\r\n\r\n            <label for=\"input text\" class=\"form-label\">\r\n              Enter data to encrypt/decrypt\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              id=\"input text\"\r\n              placeholder=\"*****\"\r\n              onChange={this.handleInputText}\r\n            />\r\n            <div class=\"form-text my-2 p-2\" style={{ wordBreak: \"break-all\" }}>\r\n              {this.state.inputText}\r\n            </div>\r\n\r\n            <div\r\n              class=\"btn-group\"\r\n              role=\"group\"\r\n              aria-label=\"Basic checkbox toggle button group\"\r\n            >\r\n              <input\r\n                onClick={this.encrypt}\r\n                class=\"btn-check\"\r\n                id=\"btncheck1\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <label class=\"btn btn-outline-primary\" for=\"btncheck1\">\r\n                <i class=\"fas fa-lock mx-2 text-success\"></i> Encrypt it!\r\n              </label>\r\n\r\n              <input\r\n                onClick={this.decrypt}\r\n                class=\"btn-check\"\r\n                id=\"btncheck3\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <label class=\"btn btn-outline-primary\" for=\"btncheck3\">\r\n                <i class=\"fas fa-unlock mx-2 text-default\"></i> Decrypt it!\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"my-3 p-2\" style={{ wordBreak: \"break-all\" }}>\r\n              {this.state.resultText}\r\n            </div>\r\n\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                onChange={this.handleFileName}\r\n                placeholder=\"Enter file name\"\r\n              />\r\n              <span class=\"input-group-text\" id=\"basic-addon2\">\r\n                .txt\r\n              </span>\r\n            </div>\r\n            <div class=\"form-text mb-3\">\r\n              {(this.state.fileName == null ||\r\n                this.state.fileName.length === 0) &&\r\n                \"File name to save with\"}\r\n            </div>\r\n            <button\r\n              onClick={this.generateTextFile}\r\n              type=\"button\"\r\n              class=\"btn btn-primary btn-lg\"\r\n            >\r\n              <i class=\"fas fa-angle-double-down mx-3\"></i>Download\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div>\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}